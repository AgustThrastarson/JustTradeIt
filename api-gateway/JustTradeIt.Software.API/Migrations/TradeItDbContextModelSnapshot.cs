// <auto-generated />
using System;
using JustTradeIt.Software.API.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JustTradeIt.Software.API.Migrations
{
    [DbContext(typeof(TradeItDbContext))]
    partial class TradeItDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemConditionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OwnerIdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemConditionId");

                    b.HasIndex("OwnerIdId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.ItemCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ItemConditions");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.JwtToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BlackListed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JwtTokens");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("IssuerDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TradeStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.TradeItem", b =>
                {
                    b.Property<int>("TradeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TradeId", "UserId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("TradeItems");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicIdentifier")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.Item", b =>
                {
                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.ItemCondition", "ItemConditionNav")
                        .WithMany("Items")
                        .HasForeignKey("ItemConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.User", "OwnerId")
                        .WithMany("Items")
                        .HasForeignKey("OwnerIdId");

                    b.Navigation("ItemConditionNav");

                    b.Navigation("OwnerId");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.ItemImage", b =>
                {
                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.Item", "ItemNav")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemNav");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.Trade", b =>
                {
                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.User", "Receiver")
                        .WithMany("TradeReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.User", "Sender")
                        .WithMany("TradeSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.TradeItem", b =>
                {
                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.Item", "Item")
                        .WithMany("TradeItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.Trade", "Trade")
                        .WithMany("TradeItems")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustTradeIt.Software.API.Repositories.Entities.User", "User")
                        .WithMany("TradeItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Trade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.Item", b =>
                {
                    b.Navigation("ItemImages");

                    b.Navigation("TradeItems");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.ItemCondition", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.Trade", b =>
                {
                    b.Navigation("TradeItems");
                });

            modelBuilder.Entity("JustTradeIt.Software.API.Repositories.Entities.User", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("TradeItems");

                    b.Navigation("TradeReceived");

                    b.Navigation("TradeSent");
                });
#pragma warning restore 612, 618
        }
    }
}
